# -*- coding: utf-8 -*-
"""LMS_program(11-1-25).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u_5H9enzjgqvxLmzPtO4gJDAvgPdnE5w

# Sentence tokenization
"""

from nltk.tokenize import PunktSentenceTokenizer
tokenizer = PunktSentenceTokenizer()
input_string = "This is an example sentence. This is another sentence."
all_sentences = tokenizer.tokenize(input_string)
print(all_sentences)

"""# Regular expression"""

import re
text = "Hello, World ! 123"
text = re.sub(r'[^a-z\s]','',text)
print(text)

"""# Using nltk with NLP and ML"""

!pip install nltk
import nltk # Import the nltk module before using it
nltk.download('all')

import re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
data = [
    [ 'spam', "Had your mobile 11 months or more? U R entitled to update to the "],
    ['ham', "I'm gonna be home soon and i don't want to talk about this stuff anymore tonight, k? I've cried enough today."],
    ['spam', "Congratulation you have won $1000 walmart gift card. call now to claim this"],
    ['ham', "I'm gonna be home soon and i don't want to talk about this stuff anymore tonight, k? I've cried enough today."],
    ['spam', "Had your mobile 11 months or more? U R entitled to update to the"],
    ['ham', "I'm gonna be home soon and i don't want to talk about this stuff anymore tonight, k? I've cried enough today."],
    ['spam', "Had your mobile 11 months or more? U R entitled to update to the"]
]
labels = [row[0] for row in data]
messages = [row[1] for row in data]

def preprocess_text(text):

    text = text.lower()
    text = re.sub(r'\[a-z\s]', ' ', text)
    words = text.split()

    from nltk.corpus import stopwords
    import nltk
    nltk.download('stopwords')
    stop_words = set(stopwords.words('english'))
    filtered_words = [word for word in words if word not in stop_words]
    return ' '.join(filtered_words)

preprocessed_messages = [preprocess_text(message) for message in messages]
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(preprocessed_messages)
y = labels
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42,stratify=y)
model = LogisticRegression()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print("Classification Report:\n", report)

new_sms = ["Congratulation you have won $1000 walmart gift card. call now to claim this"]
preprocessed_new_sms = [preprocess_text(sms) for sms in new_sms]
new_sms_vectorized = vectorizer.transform(preprocessed_new_sms)
prediction = model.predict(new_sms_vectorized)
print(f"Prediction for new SMS: {prediction[0]}")